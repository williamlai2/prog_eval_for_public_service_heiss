dd_regression <- lm(anxious_num ~ wave + treatment + wave * treatment,
data = results)
tidy(dd_regression)
hypothetical_trend <- after_control - before_control
ggplot(group_props,
aes(x = as.factor(wave), y = prop_math_anxious,
color = treatment, group = treatment)) +
geom_line(size = 2) +
geom_segment(aes(x = 1, y = before_treatment, xend = 2,
yend = (before_treatment + hypothetical_trend)),
linetype = "dotted", color = "grey10") +
geom_segment(aes(x = 2, xend = 2,
y = (before_treatment + hypothetical_trend - .005),
yend = after_treatment + 0.005),
color = "#BD1550", size = 2) +
annotate("label", x = 1.5, y = .27, label = "Normal story",
size = 3.5, color = "#490A3D") +
annotate("label", x = 1.5, y = .40, label = "Math story",
size = 3.5, color = "#8A9B0F") +
annotate("label", x = 2.05, y = (before_treatment + hypothetical_trend),
label = "Predicted trend\nwithout story",
size = 3.5, color = "grey10", hjust = 0) +
annotate("label", x = 2.05,
y = (before_treatment + hypothetical_trend) - (abs(dd_effect) / 2),
label = paste0("Effect of story\non anxiety: ", percent(dd_effect)),
size = 3.5, color = "#BD1550", hjust = 0, fontface = "bold") +
scale_color_manual(values = c("Math story" = "#8A9B0F", "Normal story" = "#490A3D")) +
scale_y_continuous(labels = percent_format(accuracy = 1)) +
scale_x_discrete(labels = c("Before", "After")) +
guides(color = "none") +
coord_cartesian(clip = "off", xlim = c(1.5, 1.85)) +
labs(x = NULL, y = "Proportion of class feeling math anxiety",
title = "Reading a story about math reduces math anxiety",
subtitle = "Experiment in four 4th grade classes") +
theme_minimal() +
theme(plot.title = element_text(face = "bold", size = rel(1.6)))
library(tidyverse)
library(broom)
library(fixest)
library(tigris)
# Mastering 'Metrics R code
# - https://jrnold.github.io/masteringmetrics/
# Original Stata file:
# - http://masteringmetrics.com/wp-content/uploads/2015/01/deaths.dta
# Original Stata .do file:
# - http://masteringmetrics.com/wp-content/uploads/2015/01/analysis.do
deaths_raw <- read_csv("data/deaths.csv")
fips <- fips_codes %>%
mutate(state_code = as.numeric(state_code)) %>%
group_by(state_code) %>%
slice(1) %>%
select(-county, -county_code)
deaths <- deaths_raw %>%
mutate(state = as.numeric(state)) %>%
left_join(fips, by = c("state" = "state_code"))
al_ar <- deaths %>%
filter(state_name %in% c("Alabama", "Arkansas")) %>%
mutate(after_change = year >= 1975,
is_alabama = state_name == "Alabama") %>%
filter(year <= 1983, agegr == "18-20 yrs", dtype == "all")
library(tidyverse)
library(broom)
library(fixest)
library(tigris)
# Mastering 'Metrics R code
# - https://jrnold.github.io/masteringmetrics/
# Original Stata file:
# - http://masteringmetrics.com/wp-content/uploads/2015/01/deaths.dta
# Original Stata .do file:
# - http://masteringmetrics.com/wp-content/uploads/2015/01/analysis.do
deaths_raw <- read_csv("data/deaths.csv")
fips <- fips_codes %>%
mutate(state_code = as.numeric(state_code)) %>%
group_by(state_code) %>%
slice(1) %>%
select(-county, -county_code)
deaths <- deaths_raw %>%
mutate(state = as.numeric(state)) %>%
left_join(fips, by = c("state" = "state_code"))
al_ar <- deaths %>%
filter(state_name %in% c("Alabama", "Arkansas")) %>%
mutate(after_change = year >= 1975,
is_alabama = state_name == "Alabama") %>%
filter(year <= 1983, agegr == "18-20 yrs", dtype == "all")
ggplot(al_ar, aes(x = year, y = mrate, color = state_name)) +
geom_line()
al_ar %>%
group_by(is_alabama, after_change) %>%
summarize(avg_mrate = mean(mrate))
model_al_ar <- lm(mrate ~ after_change + is_alabama +
(after_change * is_alabama),
data = al_ar)
tidy(model_al_ar)
deaths_filtered <- deaths %>%
filter(year <= 1983, agegr == "18-20 yrs", dtype == "all")
model <- lm(mrate ~ legal + state_name + year,
data = deaths_filtered)
tidy(model)
model_fe <- feols(mrate ~ legal | state_name + year,
cluster = ~ state_name,
data = deaths_filtered,
ssc = ssc(fixef.K = "full"))
tidy(model_fe)
ggplot(deaths_filtered, aes(x = year, y = mrate, color = state_name)) +
geom_line()
model2 <- lm(mrate ~ legal + state_name + factor(year) + state_name:year,
data = deaths_filtered)
tidy(model2)
model2_fe <- feols(mrate ~ legal + i(state_name, factor(year)) | state_name + year,
cluster = ~ state_name,
data = deaths_filtered,
ssc = ssc(fixef.K = "full"))
tidy(model2)
library(tidyverse)
library(broom)
library(fixest)
library(tigris)
deaths_raw <- read_csv("data/deaths.csv")
fips <- fips_codes %>%
mutate(state_code = as.numeric(state_code)) %>%
group_by(state_code) %>%
slice(1) %>%
select(-county, -county_code)
deaths <- deaths_raw %>%
mutate(state = as.numeric(state)) %>%
left_join(fips, by = c("state" = "state_code"))
# TODO: Make a new dataset based on `deaths` that only contains Alabama and Arkansas
# TODO: Make a new column called `after_change` that is TRUE (or 1) if year >= 1975
# TODO: Make a new column called `is_alabama` that is TRUE (or 1) if the state is Alabama
# TODO: Filter the data so that it (1) only includes years <= 1983, (2) only includes the 18-20 age group (agegr), and (3) includes only the death type (dtype) of "all"
# TODO: Use group_by() and summarize() to find the average mortality rate (mrate) in Alabama and Arkansas before and after the change (after_change)
# TODO: Use lm() to calculate the diff-in-diff effect with this model:
# TODO: Using the data for only Alabama and Arkansas, create a plot that shows
# the mortality rate over time, colored by state. Add a vertical line at 1975.
# Determine if the two states' trends are parallel pre-1975.
# TODO: Create a new dataset based on `deaths_raw` that (1) only includes years
# <= 1983, (2) only includes the 18-20 age group (agegr), and (3) includes only
# the death type (dtype) of "all"
# TODO: Use that new data to create a TWFE model like this:
#
# HINT: The year column is currently numeric (like 1981, 1982, etc.), and R
# thinks that it's truly numeric (with possible values like 1980.432, etc.). To
# treat the year column like a categorical fixed effect, you need to make it a
# factor, so use factor(year) in your model code (or use mutate() above where
# you filter the data to create a factor version of the year column)
# TODO: Create another TWFE model that incorporates state-specific time trends by including the interaction of state and year:
library(tidyverse)
library(broom)
library(fixest)
organ_donations_raw <- read_csv("data/organ_donations.csv")
# TODO: Make a dataset based on `organ_donations` that only contains California and New Jersey
# TODO: Make a new column called `After` that is TRUE (or 1) if the quarter is Q32011, Q42011, or Q12012 (or if Quarter_num is 4, 5, or 6)
# TODO: Make a new column called `is_california` that is TRUE (or 1) if the state is California
# TODO: Using the data for only California and New Jersey, create a plot that shows
# the donation rate over time, colored by state. Add a vertical line at Q22011 (or Quarter_num = 3).
# Determine if the two states' trends are parallel before the change.
# TODO: Use group_by() and summarize() to find the average donation rate in
# California and New Jersey before and after the change in California's policy
# TODO: Use lm() to calculate the diff-in-diff effect with this model:
# TODO: Create a new dataset based on `organ_donations_raw`
# TODO: Make a new column called `After` that is TRUE (or 1) if the quarter is Q32011, Q42011, or Q12012 (or if Quarter_num is 4, 5, or 6)
# TODO: Make a new column called `Treated` that is TRUE (or 1) if the state is California and After is TRUE/1
# TODO: Use that new data to create a TWFE model like this:
library(tidyverse)
library(broom)
library(fixest)
organ_donations_raw <- read_csv("data/organ_donations.csv")
# TODO: Make a dataset based on `organ_donations` that only contains California and New Jersey
# TODO: Make a new column called `After` that is TRUE (or 1) if the quarter is Q32011, Q42011, or Q12012 (or if Quarter_num is 4, 5, or 6)
# TODO: Make a new column called `is_california` that is TRUE (or 1) if the state is California
organ_ca_nj <- organ_donations_raw %>%
filter(State %in% c("California", "New Jersey")) %>%
mutate(After = Quarter %in% c("Q32011", "Q42011", "Q12012"),
is_california = State == "California")
# TODO: Using the data for only California and New Jersey, create a plot that shows
# the donation rate over time, colored by state. Add a vertical line at Q22011 (or Quarter_num = 3).
# Determine if the two states' trends are parallel before the change.
ggplot(organ_ca_nj, aes(x = Quarter_Num, y = Rate, color = State)) +
geom_vline(xintercept = 3.5) +
geom_line()
# TODO: Use group_by() and summarize() to find the average donation rate in
# California and New Jersey before and after the change in California's policy
diffs <- organ_ca_nj %>%
group_by(After, State) %>%
summarize(mean_rate = mean(Rate))
before_treatment <- diffs %>%
filter(After == FALSE, State == "California") %>%
pull(mean_rate)
before_control <- diffs %>%
filter(After == FALSE, State == "New Jersey") %>%
pull(mean_rate)
after_treatment <- diffs %>%
filter(After == TRUE, State == "California") %>%
pull(mean_rate)
after_control <- diffs %>%
filter(After == TRUE, State == "New Jersey") %>%
pull(mean_rate)
diff_treatment_before_after <- after_treatment - before_treatment
diff_treatment_before_after
diff_control_before_after <- after_control - before_control
diff_control_before_after
diff_diff <- diff_treatment_before_after - diff_control_before_after
diff_diff
# TODO: Use lm() to calculate the diff-in-diff effect with this model:
model_diff_diff <- lm(Rate ~ is_california + After + (is_california * After),
data = organ_ca_nj)
tidy(model_diff_diff)
# TODO: Create a new dataset based on `organ_donations_raw`
# TODO: Make a new column called `After` that is TRUE (or 1) if the quarter is Q32011, Q42011, or Q12012 (or if Quarter_num is 4, 5, or 6)
# TODO: Make a new column called `Treated` that is TRUE (or 1) if the state is California and After is TRUE/1
organ <- organ_donations_raw %>%
mutate(After = Quarter %in% c("Q32011", "Q42011", "Q12012")) %>%
mutate(Treated = State == "California" & After == TRUE)
# TODO: Use that new data to create a TWFE model like this:
model_twfe <- lm(Rate ~ Treated + State + Quarter,
data = organ)
tidy(model_twfe)
model_twfe_nice <- feols(Rate ~ Treated | State + Quarter,
data = organ)
tidy(model_twfe_nice)
library(tidyverse)
library(broom)
library(palmerpenguins)
penguins <- penguins %>% drop_na(sex)
model_basic <- lm(body_mass_g ~ flipper_length_mm + species,
data = penguins)
tidy(model_basic)
basic_predictions <- augment(model_basic, penguins)
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(aes(color = species)) +
geom_smooth(data = basic_predictions, aes(y = .fitted, color = species))
model_interaction <- lm(body_mass_g ~ flipper_length_mm * species,
data = penguins)
tidy(model_interaction)
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(aes(color = species)) +
geom_smooth(aes(color = species), method = "lm", se = FALSE)
knitr::opts_chunk$set(fig.width = 6, fig.height = 3.6,
fig.align = "center", fig.retina = 3)
library(tidyverse)   # ggplot(), %>%, mutate(), and friends
library(ggdag)       # Make DAGs
library(dagitty)     # Do DAG logic with R
library(haven)       # Load data from Stata files
library(broom)       # Convert models to data frames
library(patchwork)   # Combine ggplot plots
set.seed(1234)   # Make all random draws reproducible
mosquito_dag <- dagify(
malaria_risk ~ net + income + health + temperature + resistance + unobserved,
net ~ income + health + temperature + eligible + household + unobserved,
eligible ~ income + household,
health ~ income,
exposure = "net",
outcome = "malaria_risk",
coords = list(x = c(malaria_risk = 7, net = 3, income = 4, health = 4, unobserved = 6,
temperature = 6, resistance = 8.5, eligible = 2, household = 1),
y = c(malaria_risk = 2, net = 2, income = 3, health = 1, unobserved = 1,
temperature = 3, resistance = 2, eligible = 3, household = 2)),
labels = c(malaria_risk = "Risk of malaria", net = "Mosquito net", income = "Income",
health = "Health", temperature = "Nighttime temperatures",
resistance = "Insecticide resistance",
eligible = "Eligible for program", household = "Number in household",
unobserved = "Other stuff we can't measure")
)
ggdag_status(mosquito_dag, use_labels = "label", text = FALSE) +
guides(fill = "none", color = "none") +  # Disable the legend
theme_dag()
mosquito_dag_rct <- dagify(
malaria_risk ~ net + income + health + temperature + resistance + unobserved,
# net ~ income + health + temperature + eligible + household + unobserved,
eligible ~ income + household,
health ~ income,
exposure = "net",
outcome = "malaria_risk",
coords = list(x = c(malaria_risk = 7, net = 3, income = 4, health = 4, unobserved = 6,
temperature = 6, resistance = 8.5, eligible = 2, household = 1),
y = c(malaria_risk = 2, net = 2, income = 3, health = 1, unobserved = 1,
temperature = 3, resistance = 2, eligible = 3, household = 2)),
labels = c(malaria_risk = "Risk of malaria", net = "Mosquito net", income = "Income",
health = "Health", temperature = "Nighttime temperatures",
resistance = "Insecticide resistance",
eligible = "Eligible for program", household = "Number in household",
unobserved = "Other stuff we can't measure")
)
ggdag_status(mosquito_dag_rct, use_labels = "label", text = FALSE) +
guides(fill = "none", color = "none") +  # Disable the legend
theme_dag()
adjustmentSets(mosquito_dag)
nets <- read_csv("data/mosquito_nets.csv")
school_data <- read_stata("data/catholic.dta") %>%
# This data comes with Stata column labels and formatting details that can
# sometimes conflict with R functions, so `zap_labels()` and `zap_formats()`
# here get rid of them
zap_labels() %>%
zap_formats() %>%
# Make a categorical version of the catholic column
mutate(catholic_f = factor(catholic, labels = c("Public", "Catholic"))) %>%
# The faminc8 column shows the family's income in 8th grade, but using a
# 12-level categorical system. The authors of the original study converted
# this system to an actual value based on the middle of the range. So since
# level 3 represents $1000-$2999, they use 2, etc.
mutate(inc8 = recode(faminc8,
"1" = 0,
"2" = .5,
"3" = 2,
"4" = 4,
"5" = 6.25,
"6" = 8.75,
"7" = 12.5,
"8" = 17.5,
"9" = 22.5,
"10" = 30,
"11" = 42.5,
"12" = 62.5
))
ggplot(school_data, aes(x = math12, fill = catholic_f)) +
geom_density(alpha = 0.5)
math_averages <- school_data %>%
group_by(catholic_f) %>%
summarize(avg = mean(math12))
math_averages
ggplot(school_data, aes(x = math12, fill = catholic_f)) +
geom_density(alpha = 0.5) +
geom_vline(data = math_averages,
aes(xintercept = avg, color = catholic_f))
model_math_naive <- lm(math12 ~ catholic_f, data = school_data)
tidy(model_math_naive)
school_data_scaled <- school_data %>%
mutate(math12_z = scale(math12))
school_data_scaled %>%
select(math12, math12_z) %>%
head()
# See the overall average and standard deviation
school_data_scaled %>%
summarize(avg = mean(math12),
sd = sd(math12))
# This isn't 100% accurate because of rounding
(0.925 * 9.5) + 51.1
# Fortunately R stores the mean and standard deviation of scaled columns as
# special invisible attribute that we can extract and use:
math_sigma <- attr(school_data_scaled$math12_z, "scaled:scale")
math_mu <- attr(school_data_scaled$math12_z, "scaled:center")
# These are also just the mean and sd of the original math column
person2_score <- school_data_scaled %>%
slice(2) %>% pull(math12_z)
(person2_score * math_sigma) + math_mu
math_averages_scaled <- school_data_scaled %>%
group_by(catholic_f) %>%
summarize(avg_z = mean(math12_z))
math_averages_scaled
ggplot(school_data_scaled, aes(x = math12_z, fill = catholic_f)) +
geom_density(alpha = 0.5) +
geom_vline(data = math_averages_scaled,
aes(xintercept = avg_z, color = catholic_f))
model_math_naive_z <- lm(math12_z ~ catholic_f, data = school_data_scaled)
tidy(model_math_naive_z)
math_averages_scaled %>%
mutate(avg_rescaled = (avg_z * math_sigma) + math_mu)
nets_scaled <- nets %>%
mutate(malaria_risk_z = scale(malaria_risk))
malaria_averages <- nets_scaled %>%
group_by(net) %>%
summarize(avg = mean(malaria_risk),
avg_z = mean(malaria_risk_z))
malaria_regular <- ggplot(nets_scaled, aes(x = malaria_risk, fill = net)) +
geom_density(alpha = 0.5) +
geom_vline(data = malaria_averages,
aes(xintercept = avg, color = net)) +
guides(fill = "none", color = "none")
malaria_scaled <- ggplot(nets_scaled, aes(x = malaria_risk_z, fill = net)) +
geom_density(alpha = 0.5) +
geom_vline(data = malaria_averages,
aes(xintercept = avg_z, color = net))
malaria_regular | malaria_scaled
model_net_naive <- lm(malaria_risk ~ net, data = nets_scaled)
tidy(model_net_naive)
model_net_naive_z <- lm(malaria_risk_z ~ net, data = nets_scaled)
tidy(model_net_naive_z)
library(kableExtra)
tribble(
~`Effect size`, ~`<em>d</em>`,
"Very small", 0.01,
"Small", 0.20,
"Medium", 0.50,
"Large", 0.80,
"Very large", 1.20,
"Huge", 2.0,
) %>%
kbl(escape = FALSE) %>%
kable_styling(full_width = FALSE, position = "center")
tidy(model_math_naive)
glance(model_math_naive)  # We want sigma here
3.89 / 9.43
# Or more programmatically without handwritten numbers
catholic_coef <- tidy(model_math_naive) %>% filter(term == "catholic_fCatholic") %>% pull(estimate)
catholic_sigma <- glance(model_math_naive) %>% pull(sigma)
catholic_coef / catholic_sigma
net_coef <- tidy(model_net_naive) %>% filter(term == "netTRUE") %>% pull(estimate)
net_sigma <- glance(model_net_naive) %>% pull(sigma)
net_coef / net_sigma
glance(model_math_naive)
glance(model_net_naive)
model_some_controls <- lm(malaria_risk ~ net + income + health,
data = nets)
glance(model_some_controls)
library(rsq)
rsq.partial(model_some_controls)
# Estimate causal effect of net use on malaria risk
# Treatment model
model_net_treatment <- glm(net ~ income + temperature + health,
data = nets,
family = binomial(link = "logit"))
# Propensity scores and inverse probability of treatment weights (IPTW)
net_iptw <- augment(model_net_treatment, nets, type.predict = "response") %>%
rename(propensity = .fitted) %>%
mutate(iptw = (net_num / propensity) + ((1 - net_num) / (1 - propensity)))
# Outcome model
model_net_ate <- lm(malaria_risk ~ net,
data = net_iptw,
weights = iptw)
tidy(model_net_ate, conf.int = TRUE)
glance(model_net_ate)
-10.1 / 19.5
net_ate_averages <- net_iptw %>%
mutate(malaria_risk_z = scale(malaria_risk)) %>%
group_by(net) %>%
summarize(avg = mean(malaria_risk),  # Unadjusted naive difference
avg_wtd = weighted.mean(malaria_risk, w = iptw),  # Adjusted difference
avg_z = mean(malaria_risk_z),  # Unadjusted naive difference, z-scores
avg_wtd_z = weighted.mean(malaria_risk_z, iptw))  # Adjusted difference, z-scores
net_ate_averages
net_ate_density <- ggplot(net_iptw, aes(x = malaria_risk, fill = net)) +
geom_density(aes(weight = iptw), alpha = 0.5) +
geom_vline(data = net_ate_averages,
aes(xintercept = avg_wtd, color = net)) +
guides(fill = "none", color = "none")
net_ate_z_density <- ggplot(net_iptw, aes(x = scale(malaria_risk), fill = net)) +
geom_density(aes(weight = iptw), alpha = 0.5) +
geom_vline(data = net_ate_averages,
aes(xintercept = avg_wtd_z, color = net))
net_ate_density | net_ate_z_density
# Estimate causal effect of Catholic schools on math scores
# Treatment model
model_school_treatment <- glm(catholic ~ I(inc8^2) + (inc8*math8) + fhowfar +
mhowfar + fight8 + nohw8 + disrupt8 + riskdrop8,
data = school_data,
family = binomial(link = "logit"))
# Propensity scores and inverse probability of treatment weights (IPTW)
school_iptw <- augment(model_school_treatment, school_data,
type.predict = "response") %>%
rename(propensity = .fitted) %>%
mutate(iptw = (catholic / propensity) + ((1 - catholic) / (1 - propensity)))
# Outcome model
model_school_ate <- lm(math12 ~ catholic,
data = school_iptw,
weights = iptw)
tidy(model_school_ate, conf.int = TRUE)
glance(model_school_ate)
1.47 / 13.1
school_ate_averages <- school_iptw %>%
mutate(math12_z = scale(math12)) %>%
group_by(catholic) %>%
summarize(avg = mean(math12),  # Unadjusted naive difference
avg_wtd = weighted.mean(math12, w = iptw),  # Adjusted difference
avg_z = mean(math12_z),  # Unadjusted naive difference, z-scores
avg_wtd_z = weighted.mean(math12_z, iptw))  # Adjusted difference, z-scores
school_ate_averages
school_ate_density <- ggplot(school_iptw, aes(x = math12, fill = factor(catholic))) +
geom_density(aes(weight = iptw), alpha = 0.5) +
geom_vline(data = school_ate_averages,
aes(xintercept = avg_wtd, color = factor(catholic))) +
guides(fill = "none", color = "none")
school_ate_z_density <- ggplot(school_iptw, aes(x = scale(math12), fill = factor(catholic))) +
geom_density(aes(weight = iptw), alpha = 0.5) +
geom_vline(data = school_ate_averages,
aes(xintercept = avg_wtd_z, color = factor(catholic)))
school_ate_density | school_ate_z_density
data_confounder <- dagify(
Y ~ Z + X,
X ~ Z,
exposure = "X",
outcome = "Y",
latent = "Z",
coords = list(x = c(X = 0, Y = 2, Z = 1),
y = c(X = 0, Y = 0, Z = 1))
) %>%
tidy_dagitty() %>%
node_status() %>%
mutate(arrow_color = ifelse(name == "Z", "orange", "grey80")) %>%
mutate(node_color = ifelse(name == "Z", TRUE, FALSE))
ggplot(data_confounder, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_edges(aes(edge_colour = arrow_color), edge_width = 1) +
geom_dag_point(aes(color = node_color), size = 12) +
geom_dag_text(data = filter(data_confounder, name != "Z"), size = 4) +
geom_dag_text(data = filter(data_confounder, name == "Z"), color = "white", size = 4) +
scale_color_manual(values = c("grey80", "orange"), guide = "none") +
theme_dag()
library(ggtext)
ggplot(data_confounder, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_edges(aes(edge_colour = arrow_color), edge_width = 1) +
geom_dag_point(aes(color = node_color), size = 12) +
geom_dag_text(data = filter(data_confounder, name != "Z"), size = 4) +
geom_dag_text(data = filter(data_confounder, name == "Z"), color = "white", size = 4) +
scale_color_manual(values = c("grey80", "orange"), guide = "none") +
annotate(geom = "richtext", x = 1.6, y = 0.6,
label = "<b>Outcome association</b><br>The β in lm(Y ~ Z)") +
annotate(geom = "richtext", x = 0.4, y = 0.6,
label = "<b>Scaled mean difference</b><br>mean(Z<sub>Treated</sub>) − mean(Z<sub>Untreated</sub>)") +
theme_dag()
library(tipr)
tidy(model_net_ate, conf.int = TRUE) %>%
filter(term == "netTRUE") %>%
lm_tip(outcome_association = 5)
